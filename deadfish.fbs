namespace DeadFish;

enum Error: byte {
  NameEmpty,
  NameAlreadyTaken
}

table ErrorWrapper {
  error: Error;
}

// level

struct Vec2 {
  x:float;
  y:float;
}

table Stone {
    radius: float;
    pos: Vec2;
}

table Bush {
    radius: float;
    pos: Vec2;
}

table NavPoint {
  position: Vec2;
  name: string;
  neighbors: [string];
  isspawn: bool;
  isplayerspawn: bool;
}

table Level {
    bushes:[Bush];
    stones:[Stone];
    navpoints:[NavPoint];
    playerpoints:[Vec2];
    size:Vec2;
}

// client

table CommandFollow {
  id:uint16;
}

table CommandMove {
  target:Vec2;
}

table CommandKill {
  id:uint16;
}

table CommandUse {
  id:uint16;
}

table JoinRequest {
  name:string;
}

union ClientMessageUnion {
  CommandFollow,
  CommandMove,
  CommandKill,
  CommandUse,
  JoinRequest,
  ErrorWrapper
}

table ClientMessage {
  event:ClientMessageUnion;
}

// server

enum MobState: byte {
  Idle,
  Walking
}

table Mob {
  id:uint16;
  pos:Vec2;
  angle:float;
  state:MobState;
  species:uint16;
}

table WorldState {
  mobs:[Mob];
}

table PlayerDied {
  killedBy:uint16;
}

table HighscoreEntry {
  playerId:uint16;
  playerPoints:uint16;
}

table HighscoreUpdate {
  players:[HighscoreEntry];
}

table KilledPlayer {
  playerId:uint16;
}

enum SimpleServerEventType: byte {
  KilledNPC
}

table SimpleServerEvent {
  type:SimpleServerEventType;
}

table ContractChange {
  species:uint16;
}

table InitPlayer {
  id:uint16;
  name:string;
  species:uint16;
}

table InitMetadata {
  levelId:uint16;
  players:[InitPlayer];
  yourid:uint16;
}

union ServerMessageUnion {
  PlayerDied,
  HighscoreUpdate,
  KilledPlayer,
  SimpleServerEvent,
  ContractChange,
  InitMetadata,
  WorldState,
  ErrorWrapper,
  Level
}

table ServerMessage {
  event:ServerMessageUnion;
}
