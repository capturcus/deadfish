namespace FlatBuffGenerated;

// level

struct Vec2 {
  x:float;
  y:float;
}

table Tileinfo {
  gid: uint16;
  name: string;
}

table Object {
    pos: Vec2;
    rotation: float;
    size: Vec2;
    gid: uint16;
    hspotname: string;
}

table Decoration {
    pos: Vec2;
    rotation: float;
    size: Vec2;
    gid: uint16;
}

table CollisionMask {
    pos: Vec2;
    size: Vec2;
    rotation: float;
    isCircle: bool;
    polyverts: [Vec2];
}

table HidingSpot {
    pos: Vec2;
    size: Vec2;
    rotation: float;
    isCircle: bool;
    polyverts: [Vec2];
    name: string;
}

table NavPoint {
  position: Vec2;
  radius: float;
  name: string;
  neighbors: [string];
  isspawn: bool;
  isplayerspawn: bool;
}

table PlayerWall {
  position: Vec2;
  size: Vec2;
  rotation: float;
}

table Tilelayer {
  width: int;
  height: int;
  tilesize: Vec2;
  tiledata: [uint16];
}

table Level {
  objects: [Object];
  decoration: [Decoration];
  hidingspots: [HidingSpot];
  collisionMasks: [CollisionMask];
  navpoints: [NavPoint];
  playerwalls: [PlayerWall];
  tileinfo: [Tileinfo];
  tilelayer: Tilelayer;
  size: Vec2;
}

// client

table CommandMove {
  target:Vec2;
}

table CommandKill {
  mobID:uint16;
}

table CommandRun {
  run:bool;
}

table CommandSkill {
  skill:uint8;
  mousePos:Vec2;
}

table JoinRequest {
  name:string;
}

table PlayerReady {

}

union ClientMessageUnion {
  CommandMove,
  CommandKill,
  CommandRun,
  CommandSkill,
  JoinRequest,
  PlayerReady
}

table ClientMessage {
  event:ClientMessageUnion;
}

// server

enum MobState: byte {
  Walk,
  Run,
  Attack
}

enum PlayerRelation: byte {
  None,
  Targeted
}

struct MovableComponent {
  pos:Vec2;
  ID:uint16;
  angle:float;
}

table Mob {
  movable:MovableComponent;
  state:MobState;
  species:uint16;
  relation:PlayerRelation;
}

table Indicator {
  angle:float;
  force:float;
  visible:bool;
}

table InkParticle {
  movable:MovableComponent;
}

enum MobManipulatorType: byte {
  Attractor,
  Dispersor
}

table MobManipulator {
  movable:MovableComponent;
  type:MobManipulatorType;
}

table WorldState {
  mobs:[Mob];
  indicators:[Indicator];
  inkParticles:[InkParticle];
  stepsRemaining:uint64;
  mobManipulators:[MobManipulator];
  currentHidingSpot:string;
}

table HighscoreEntry {
  playerID:uint16;
  playerPoints:int16;
}

table HighscoreUpdate {
  players:[HighscoreEntry];
}

table DeathReport {
  killer:uint16;
  victim:uint16;
  killerKills:uint16;
  victimKills:uint16;
  multikill:uint16;
  killing_spree:uint16;
  shutdown:uint16;
  domination:uint16;
  revenge:uint16;
  comeback:uint16;
}

enum SimpleServerEventType: byte {
  GameEnded,
  GameAlreadyInProgress
}

table SimpleServerEvent {
  type:SimpleServerEventType;
}

table InitPlayer {
  playerID:uint16;
  name:string;
  species:uint16;
  ready:bool;
}

table InitMetadata {
  players:[InitPlayer];
  yourMobID:uint16;
  yourPlayerID:uint16;
}

table SkillBarUpdate {
  skills:[uint16];
}

union ServerMessageUnion {
  DeathReport,
  HighscoreUpdate,
  SimpleServerEvent,
  InitMetadata,
  WorldState,
  Level,
  SkillBarUpdate
}

table ServerMessage {
  event:ServerMessageUnion;
}
